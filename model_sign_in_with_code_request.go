/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the SignInWithCodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignInWithCodeRequest{}

// SignInWithCodeRequest Request for checking if the code was confirmed.
type SignInWithCodeRequest struct {
	// Verifier for PKCE validation.
	CodeVerifier *string `json:"codeVerifier,omitempty"`
}

// NewSignInWithCodeRequest instantiates a new SignInWithCodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignInWithCodeRequest() *SignInWithCodeRequest {
	this := SignInWithCodeRequest{}
	return &this
}

// NewSignInWithCodeRequestWithDefaults instantiates a new SignInWithCodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignInWithCodeRequestWithDefaults() *SignInWithCodeRequest {
	this := SignInWithCodeRequest{}
	return &this
}

// GetCodeVerifier returns the CodeVerifier field value if set, zero value otherwise.
func (o *SignInWithCodeRequest) GetCodeVerifier() string {
	if o == nil || IsNil(o.CodeVerifier) {
		var ret string
		return ret
	}
	return *o.CodeVerifier
}

// GetCodeVerifierOk returns a tuple with the CodeVerifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignInWithCodeRequest) GetCodeVerifierOk() (*string, bool) {
	if o == nil || IsNil(o.CodeVerifier) {
		return nil, false
	}
	return o.CodeVerifier, true
}

// HasCodeVerifier returns a boolean if a field has been set.
func (o *SignInWithCodeRequest) HasCodeVerifier() bool {
	if o != nil && !IsNil(o.CodeVerifier) {
		return true
	}

	return false
}

// SetCodeVerifier gets a reference to the given string and assigns it to the CodeVerifier field.
func (o *SignInWithCodeRequest) SetCodeVerifier(v string) {
	o.CodeVerifier = &v
}

func (o SignInWithCodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignInWithCodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CodeVerifier) {
		toSerialize["codeVerifier"] = o.CodeVerifier
	}
	return toSerialize, nil
}

type NullableSignInWithCodeRequest struct {
	value *SignInWithCodeRequest
	isSet bool
}

func (v NullableSignInWithCodeRequest) Get() *SignInWithCodeRequest {
	return v.value
}

func (v *NullableSignInWithCodeRequest) Set(val *SignInWithCodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSignInWithCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSignInWithCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignInWithCodeRequest(val *SignInWithCodeRequest) *NullableSignInWithCodeRequest {
	return &NullableSignInWithCodeRequest{value: val, isSet: true}
}

func (v NullableSignInWithCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignInWithCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


