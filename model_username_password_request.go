/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the UsernamePasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsernamePasswordRequest{}

// UsernamePasswordRequest Request for signing up or signing in a Username Password account.
type UsernamePasswordRequest struct {
	// The username. Case insensitive. Length must be between 3-20 with the allowed characters a-z, 0-9 and the symbols [.][-][@][_].
	Username *string `json:"username,omitempty"`
	// The password. Length must be between 8-30 and contain at least one uppercase letter, at least one lowercase letter, at least one number and at least one symbol.
	Password *string `json:"password,omitempty"`
}

// NewUsernamePasswordRequest instantiates a new UsernamePasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsernamePasswordRequest() *UsernamePasswordRequest {
	this := UsernamePasswordRequest{}
	return &this
}

// NewUsernamePasswordRequestWithDefaults instantiates a new UsernamePasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsernamePasswordRequestWithDefaults() *UsernamePasswordRequest {
	this := UsernamePasswordRequest{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UsernamePasswordRequest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernamePasswordRequest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UsernamePasswordRequest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UsernamePasswordRequest) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UsernamePasswordRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernamePasswordRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UsernamePasswordRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UsernamePasswordRequest) SetPassword(v string) {
	o.Password = &v
}

func (o UsernamePasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsernamePasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	return toSerialize, nil
}

type NullableUsernamePasswordRequest struct {
	value *UsernamePasswordRequest
	isSet bool
}

func (v NullableUsernamePasswordRequest) Get() *UsernamePasswordRequest {
	return v.value
}

func (v *NullableUsernamePasswordRequest) Set(val *UsernamePasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUsernamePasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUsernamePasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsernamePasswordRequest(val *UsernamePasswordRequest) *NullableUsernamePasswordRequest {
	return &NullableUsernamePasswordRequest{value: val, isSet: true}
}

func (v NullableUsernamePasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsernamePasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


