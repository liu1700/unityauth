/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the JSONWebKeySet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSONWebKeySet{}

// JSONWebKeySet JSON Web Key Set for validating authentication tokens.
type JSONWebKeySet struct {
	Keys []JSONWebKey `json:"keys,omitempty"`
}

// NewJSONWebKeySet instantiates a new JSONWebKeySet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSONWebKeySet() *JSONWebKeySet {
	this := JSONWebKeySet{}
	return &this
}

// NewJSONWebKeySetWithDefaults instantiates a new JSONWebKeySet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSONWebKeySetWithDefaults() *JSONWebKeySet {
	this := JSONWebKeySet{}
	return &this
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *JSONWebKeySet) GetKeys() []JSONWebKey {
	if o == nil || IsNil(o.Keys) {
		var ret []JSONWebKey
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSONWebKeySet) GetKeysOk() ([]JSONWebKey, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *JSONWebKeySet) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []JSONWebKey and assigns it to the Keys field.
func (o *JSONWebKeySet) SetKeys(v []JSONWebKey) {
	o.Keys = v
}

func (o JSONWebKeySet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSONWebKeySet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	return toSerialize, nil
}

type NullableJSONWebKeySet struct {
	value *JSONWebKeySet
	isSet bool
}

func (v NullableJSONWebKeySet) Get() *JSONWebKeySet {
	return v.value
}

func (v *NullableJSONWebKeySet) Set(val *JSONWebKeySet) {
	v.value = val
	v.isSet = true
}

func (v NullableJSONWebKeySet) IsSet() bool {
	return v.isSet
}

func (v *NullableJSONWebKeySet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSONWebKeySet(val *JSONWebKeySet) *NullableJSONWebKeySet {
	return &NullableJSONWebKeySet{value: val, isSet: true}
}

func (v NullableJSONWebKeySet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSONWebKeySet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


