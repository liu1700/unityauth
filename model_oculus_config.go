/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the OculusConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OculusConfig{}

// OculusConfig The request body for Oculus authentication. This field is not applicable for any other Id provider.
type OculusConfig struct {
	// String value of the oculus player's Id.
	UserId *string `json:"userId,omitempty"`
}

// NewOculusConfig instantiates a new OculusConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOculusConfig() *OculusConfig {
	this := OculusConfig{}
	return &this
}

// NewOculusConfigWithDefaults instantiates a new OculusConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOculusConfigWithDefaults() *OculusConfig {
	this := OculusConfig{}
	return &this
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *OculusConfig) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OculusConfig) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *OculusConfig) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *OculusConfig) SetUserId(v string) {
	o.UserId = &v
}

func (o OculusConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OculusConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	return toSerialize, nil
}

type NullableOculusConfig struct {
	value *OculusConfig
	isSet bool
}

func (v NullableOculusConfig) Get() *OculusConfig {
	return v.value
}

func (v *NullableOculusConfig) Set(val *OculusConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOculusConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOculusConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOculusConfig(val *OculusConfig) *NullableOculusConfig {
	return &NullableOculusConfig{value: val, isSet: true}
}

func (v NullableOculusConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOculusConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


