/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the UsernamePasswordPasswordUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsernamePasswordPasswordUpdateRequest{}

// UsernamePasswordPasswordUpdateRequest Request for updating the password of a player using a Username Password account.
type UsernamePasswordPasswordUpdateRequest struct {
	// The password. Length must be between 8-30 and contain at least one uppercase letter, at least one lowercase letter, at least one number and at least one symbol.
	Password *string `json:"password,omitempty"`
	// The password to be changed. Length must be between 8-30 and contain at least one uppercase letter, at least one lowercase letter, at least one number and at least one symbol.
	NewPassword *string `json:"newPassword,omitempty"`
}

// NewUsernamePasswordPasswordUpdateRequest instantiates a new UsernamePasswordPasswordUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsernamePasswordPasswordUpdateRequest() *UsernamePasswordPasswordUpdateRequest {
	this := UsernamePasswordPasswordUpdateRequest{}
	return &this
}

// NewUsernamePasswordPasswordUpdateRequestWithDefaults instantiates a new UsernamePasswordPasswordUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsernamePasswordPasswordUpdateRequestWithDefaults() *UsernamePasswordPasswordUpdateRequest {
	this := UsernamePasswordPasswordUpdateRequest{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *UsernamePasswordPasswordUpdateRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernamePasswordPasswordUpdateRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *UsernamePasswordPasswordUpdateRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *UsernamePasswordPasswordUpdateRequest) SetPassword(v string) {
	o.Password = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *UsernamePasswordPasswordUpdateRequest) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword) {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsernamePasswordPasswordUpdateRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NewPassword) {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UsernamePasswordPasswordUpdateRequest) HasNewPassword() bool {
	if o != nil && !IsNil(o.NewPassword) {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *UsernamePasswordPasswordUpdateRequest) SetNewPassword(v string) {
	o.NewPassword = &v
}

func (o UsernamePasswordPasswordUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsernamePasswordPasswordUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.NewPassword) {
		toSerialize["newPassword"] = o.NewPassword
	}
	return toSerialize, nil
}

type NullableUsernamePasswordPasswordUpdateRequest struct {
	value *UsernamePasswordPasswordUpdateRequest
	isSet bool
}

func (v NullableUsernamePasswordPasswordUpdateRequest) Get() *UsernamePasswordPasswordUpdateRequest {
	return v.value
}

func (v *NullableUsernamePasswordPasswordUpdateRequest) Set(val *UsernamePasswordPasswordUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUsernamePasswordPasswordUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUsernamePasswordPasswordUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsernamePasswordPasswordUpdateRequest(val *UsernamePasswordPasswordUpdateRequest) *NullableUsernamePasswordPasswordUpdateRequest {
	return &NullableUsernamePasswordPasswordUpdateRequest{value: val, isSet: true}
}

func (v NullableUsernamePasswordPasswordUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsernamePasswordPasswordUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


