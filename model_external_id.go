/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the ExternalId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalId{}

// ExternalId Represents a Player provided by an External Provider.
type ExternalId struct {
	// The Id of the player from the external provider.
	ExternalId *string `json:"externalId,omitempty"`
	// The provider Id within the Id domain that provided the link.
	ProviderId *string `json:"providerId,omitempty"`
}

// NewExternalId instantiates a new ExternalId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalId() *ExternalId {
	this := ExternalId{}
	return &this
}

// NewExternalIdWithDefaults instantiates a new ExternalId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalIdWithDefaults() *ExternalId {
	this := ExternalId{}
	return &this
}

// GetExternalId returns the ExternalId field value if set, zero value otherwise.
func (o *ExternalId) GetExternalId() string {
	if o == nil || IsNil(o.ExternalId) {
		var ret string
		return ret
	}
	return *o.ExternalId
}

// GetExternalIdOk returns a tuple with the ExternalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalId) GetExternalIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExternalId) {
		return nil, false
	}
	return o.ExternalId, true
}

// HasExternalId returns a boolean if a field has been set.
func (o *ExternalId) HasExternalId() bool {
	if o != nil && !IsNil(o.ExternalId) {
		return true
	}

	return false
}

// SetExternalId gets a reference to the given string and assigns it to the ExternalId field.
func (o *ExternalId) SetExternalId(v string) {
	o.ExternalId = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *ExternalId) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalId) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *ExternalId) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *ExternalId) SetProviderId(v string) {
	o.ProviderId = &v
}

func (o ExternalId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExternalId) {
		toSerialize["externalId"] = o.ExternalId
	}
	if !IsNil(o.ProviderId) {
		toSerialize["providerId"] = o.ProviderId
	}
	return toSerialize, nil
}

type NullableExternalId struct {
	value *ExternalId
	isSet bool
}

func (v NullableExternalId) Get() *ExternalId {
	return v.value
}

func (v *NullableExternalId) Set(val *ExternalId) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalId) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalId(val *ExternalId) *NullableExternalId {
	return &NullableExternalId{value: val, isSet: true}
}

func (v NullableExternalId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


