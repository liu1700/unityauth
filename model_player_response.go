/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the PlayerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlayerResponse{}

// PlayerResponse Represents the player data.
type PlayerResponse struct {
	// Whether the player is disabled by admin.
	Disabled *bool `json:"disabled,omitempty"`
	// This is the response returned when get player is called.
	ExternalIds []ExternalId `json:"externalIds,omitempty"`
	// The player Id. The Id is unique within the Id domain.
	Id *string `json:"id,omitempty"`
	// When the player was created. It is a unix timestamp.
	CreatedAt *string `json:"createdAt,omitempty"`
	// When the player last logged in. It is a unix timestamp.
	LastLoginAt *string `json:"lastLoginAt,omitempty"`
	Usernamepassword *UsernamePasswordResponse `json:"usernamepassword,omitempty"`
}

// NewPlayerResponse instantiates a new PlayerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlayerResponse() *PlayerResponse {
	this := PlayerResponse{}
	return &this
}

// NewPlayerResponseWithDefaults instantiates a new PlayerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlayerResponseWithDefaults() *PlayerResponse {
	this := PlayerResponse{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *PlayerResponse) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerResponse) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *PlayerResponse) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *PlayerResponse) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetExternalIds returns the ExternalIds field value if set, zero value otherwise.
func (o *PlayerResponse) GetExternalIds() []ExternalId {
	if o == nil || IsNil(o.ExternalIds) {
		var ret []ExternalId
		return ret
	}
	return o.ExternalIds
}

// GetExternalIdsOk returns a tuple with the ExternalIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerResponse) GetExternalIdsOk() ([]ExternalId, bool) {
	if o == nil || IsNil(o.ExternalIds) {
		return nil, false
	}
	return o.ExternalIds, true
}

// HasExternalIds returns a boolean if a field has been set.
func (o *PlayerResponse) HasExternalIds() bool {
	if o != nil && !IsNil(o.ExternalIds) {
		return true
	}

	return false
}

// SetExternalIds gets a reference to the given []ExternalId and assigns it to the ExternalIds field.
func (o *PlayerResponse) SetExternalIds(v []ExternalId) {
	o.ExternalIds = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PlayerResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PlayerResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PlayerResponse) SetId(v string) {
	o.Id = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *PlayerResponse) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerResponse) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *PlayerResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *PlayerResponse) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetLastLoginAt returns the LastLoginAt field value if set, zero value otherwise.
func (o *PlayerResponse) GetLastLoginAt() string {
	if o == nil || IsNil(o.LastLoginAt) {
		var ret string
		return ret
	}
	return *o.LastLoginAt
}

// GetLastLoginAtOk returns a tuple with the LastLoginAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerResponse) GetLastLoginAtOk() (*string, bool) {
	if o == nil || IsNil(o.LastLoginAt) {
		return nil, false
	}
	return o.LastLoginAt, true
}

// HasLastLoginAt returns a boolean if a field has been set.
func (o *PlayerResponse) HasLastLoginAt() bool {
	if o != nil && !IsNil(o.LastLoginAt) {
		return true
	}

	return false
}

// SetLastLoginAt gets a reference to the given string and assigns it to the LastLoginAt field.
func (o *PlayerResponse) SetLastLoginAt(v string) {
	o.LastLoginAt = &v
}

// GetUsernamepassword returns the Usernamepassword field value if set, zero value otherwise.
func (o *PlayerResponse) GetUsernamepassword() UsernamePasswordResponse {
	if o == nil || IsNil(o.Usernamepassword) {
		var ret UsernamePasswordResponse
		return ret
	}
	return *o.Usernamepassword
}

// GetUsernamepasswordOk returns a tuple with the Usernamepassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlayerResponse) GetUsernamepasswordOk() (*UsernamePasswordResponse, bool) {
	if o == nil || IsNil(o.Usernamepassword) {
		return nil, false
	}
	return o.Usernamepassword, true
}

// HasUsernamepassword returns a boolean if a field has been set.
func (o *PlayerResponse) HasUsernamepassword() bool {
	if o != nil && !IsNil(o.Usernamepassword) {
		return true
	}

	return false
}

// SetUsernamepassword gets a reference to the given UsernamePasswordResponse and assigns it to the Usernamepassword field.
func (o *PlayerResponse) SetUsernamepassword(v UsernamePasswordResponse) {
	o.Usernamepassword = &v
}

func (o PlayerResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlayerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.ExternalIds) {
		toSerialize["externalIds"] = o.ExternalIds
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.LastLoginAt) {
		toSerialize["lastLoginAt"] = o.LastLoginAt
	}
	if !IsNil(o.Usernamepassword) {
		toSerialize["usernamepassword"] = o.Usernamepassword
	}
	return toSerialize, nil
}

type NullablePlayerResponse struct {
	value *PlayerResponse
	isSet bool
}

func (v NullablePlayerResponse) Get() *PlayerResponse {
	return v.value
}

func (v *NullablePlayerResponse) Set(val *PlayerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePlayerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePlayerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlayerResponse(val *PlayerResponse) *NullablePlayerResponse {
	return &NullablePlayerResponse{value: val, isSet: true}
}

func (v NullablePlayerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlayerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


