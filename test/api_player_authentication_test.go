/*
Player Authentication API

Testing PlayerAuthenticationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package unityauth

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/liu1700/unityauth"
)

func Test_unityauth_PlayerAuthenticationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlayerAuthenticationAPIService CodeConfirmation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PlayerAuthenticationAPI.CodeConfirmation(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService DeletePlayer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playerId string

		httpRes, err := apiClient.PlayerAuthenticationAPI.DeletePlayer(context.Background(), playerId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService GenerateCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.GenerateCode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService GetCodeInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.GetCodeInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService GetJSONWebKeySet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.GetJSONWebKeySet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService GetPlayer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playerId string

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.GetPlayer(context.Background(), playerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService LinkExternalId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idProvider string

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.LinkExternalId(context.Background(), idProvider).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService SignInWithCode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var codeLinkSessionId string

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.SignInWithCode(context.Background(), codeLinkSessionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService SignInWithExternalToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idProvider string

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.SignInWithExternalToken(context.Background(), idProvider).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService SignInWithSessionToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.SignInWithSessionToken(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService SignInWithUsernamePassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.SignInWithUsernamePassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService SignUpAnonymously", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.SignUpAnonymously(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService SignUpWithUsernamePassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.SignUpWithUsernamePassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService UnlinkExternalId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var idProvider string

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.UnlinkExternalId(context.Background(), idProvider).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAPIService UsernamePasswordUpdatePassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PlayerAuthenticationAPI.UsernamePasswordUpdatePassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
