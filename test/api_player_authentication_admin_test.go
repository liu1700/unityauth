/*
Player Authentication Admin API

Testing PlayerAuthenticationAdminAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package unityauth

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/liu1700/unityauth"
)

func Test_unityauth_PlayerAuthenticationAdminAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PlayerAuthenticationAdminAPIService DeletePlayer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playerId string
		var projectId string

		resp, httpRes, err := apiClient.PlayerAuthenticationAdminAPI.DeletePlayer(context.Background(), playerId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAdminAPIService DisablePlayer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playerId string
		var projectId string

		resp, httpRes, err := apiClient.PlayerAuthenticationAdminAPI.DisablePlayer(context.Background(), playerId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAdminAPIService EnablePlayer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playerId string
		var projectId string

		resp, httpRes, err := apiClient.PlayerAuthenticationAdminAPI.EnablePlayer(context.Background(), playerId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAdminAPIService GetPlayer", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var playerId string
		var projectId string

		resp, httpRes, err := apiClient.PlayerAuthenticationAdminAPI.GetPlayer(context.Background(), playerId, projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PlayerAuthenticationAdminAPIService ListPlayers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId string

		resp, httpRes, err := apiClient.PlayerAuthenticationAdminAPI.ListPlayers(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
