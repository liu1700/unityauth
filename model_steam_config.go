/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the SteamConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SteamConfig{}

// SteamConfig Identifying string passed as a parameter to Steam's GetAuthTicketForWebApi when the ticket was created, used to identify the entity calling this webapi. This should not be sent if no identity was passed issue a ticket from steam.
type SteamConfig struct {
	// If this identity string was passed to GetAuthTicketForWebApi then the same value must be provided as the identity property. This value should be the comprised of alphanumeric characters with a length between 5 and 30.
	Identity *string `json:"identity,omitempty"`
}

// NewSteamConfig instantiates a new SteamConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSteamConfig() *SteamConfig {
	this := SteamConfig{}
	return &this
}

// NewSteamConfigWithDefaults instantiates a new SteamConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSteamConfigWithDefaults() *SteamConfig {
	this := SteamConfig{}
	return &this
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *SteamConfig) GetIdentity() string {
	if o == nil || IsNil(o.Identity) {
		var ret string
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SteamConfig) GetIdentityOk() (*string, bool) {
	if o == nil || IsNil(o.Identity) {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *SteamConfig) HasIdentity() bool {
	if o != nil && !IsNil(o.Identity) {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given string and assigns it to the Identity field.
func (o *SteamConfig) SetIdentity(v string) {
	o.Identity = &v
}

func (o SteamConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SteamConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identity) {
		toSerialize["identity"] = o.Identity
	}
	return toSerialize, nil
}

type NullableSteamConfig struct {
	value *SteamConfig
	isSet bool
}

func (v NullableSteamConfig) Get() *SteamConfig {
	return v.value
}

func (v *NullableSteamConfig) Set(val *SteamConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSteamConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSteamConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSteamConfig(val *SteamConfig) *NullableSteamConfig {
	return &NullableSteamConfig{value: val, isSet: true}
}

func (v NullableSteamConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSteamConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


