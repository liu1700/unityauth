/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the LinkExternalIdRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LinkExternalIdRequest{}

// LinkExternalIdRequest the request body for link external id
type LinkExternalIdRequest struct {
	// Force a link between the player specified in the UAS access token and the external Id. If a different UAS player is already linked to the external id, unlink that player from the external id before linking the request's player.
	ForceLink *bool `json:"forceLink,omitempty"`
	// External token that can be verified to represent a player from the Id provider. This may be an Id token or an access token.
	Token *string `json:"token,omitempty"`
	OculusConfig *OculusConfig `json:"oculusConfig,omitempty"`
	AppleGameCenterConfig *AppleGameCenterConfig `json:"appleGameCenterConfig,omitempty"`
	SteamConfig *SteamConfig `json:"steamConfig,omitempty"`
}

// NewLinkExternalIdRequest instantiates a new LinkExternalIdRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLinkExternalIdRequest() *LinkExternalIdRequest {
	this := LinkExternalIdRequest{}
	return &this
}

// NewLinkExternalIdRequestWithDefaults instantiates a new LinkExternalIdRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLinkExternalIdRequestWithDefaults() *LinkExternalIdRequest {
	this := LinkExternalIdRequest{}
	return &this
}

// GetForceLink returns the ForceLink field value if set, zero value otherwise.
func (o *LinkExternalIdRequest) GetForceLink() bool {
	if o == nil || IsNil(o.ForceLink) {
		var ret bool
		return ret
	}
	return *o.ForceLink
}

// GetForceLinkOk returns a tuple with the ForceLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkExternalIdRequest) GetForceLinkOk() (*bool, bool) {
	if o == nil || IsNil(o.ForceLink) {
		return nil, false
	}
	return o.ForceLink, true
}

// HasForceLink returns a boolean if a field has been set.
func (o *LinkExternalIdRequest) HasForceLink() bool {
	if o != nil && !IsNil(o.ForceLink) {
		return true
	}

	return false
}

// SetForceLink gets a reference to the given bool and assigns it to the ForceLink field.
func (o *LinkExternalIdRequest) SetForceLink(v bool) {
	o.ForceLink = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *LinkExternalIdRequest) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkExternalIdRequest) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *LinkExternalIdRequest) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *LinkExternalIdRequest) SetToken(v string) {
	o.Token = &v
}

// GetOculusConfig returns the OculusConfig field value if set, zero value otherwise.
func (o *LinkExternalIdRequest) GetOculusConfig() OculusConfig {
	if o == nil || IsNil(o.OculusConfig) {
		var ret OculusConfig
		return ret
	}
	return *o.OculusConfig
}

// GetOculusConfigOk returns a tuple with the OculusConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkExternalIdRequest) GetOculusConfigOk() (*OculusConfig, bool) {
	if o == nil || IsNil(o.OculusConfig) {
		return nil, false
	}
	return o.OculusConfig, true
}

// HasOculusConfig returns a boolean if a field has been set.
func (o *LinkExternalIdRequest) HasOculusConfig() bool {
	if o != nil && !IsNil(o.OculusConfig) {
		return true
	}

	return false
}

// SetOculusConfig gets a reference to the given OculusConfig and assigns it to the OculusConfig field.
func (o *LinkExternalIdRequest) SetOculusConfig(v OculusConfig) {
	o.OculusConfig = &v
}

// GetAppleGameCenterConfig returns the AppleGameCenterConfig field value if set, zero value otherwise.
func (o *LinkExternalIdRequest) GetAppleGameCenterConfig() AppleGameCenterConfig {
	if o == nil || IsNil(o.AppleGameCenterConfig) {
		var ret AppleGameCenterConfig
		return ret
	}
	return *o.AppleGameCenterConfig
}

// GetAppleGameCenterConfigOk returns a tuple with the AppleGameCenterConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkExternalIdRequest) GetAppleGameCenterConfigOk() (*AppleGameCenterConfig, bool) {
	if o == nil || IsNil(o.AppleGameCenterConfig) {
		return nil, false
	}
	return o.AppleGameCenterConfig, true
}

// HasAppleGameCenterConfig returns a boolean if a field has been set.
func (o *LinkExternalIdRequest) HasAppleGameCenterConfig() bool {
	if o != nil && !IsNil(o.AppleGameCenterConfig) {
		return true
	}

	return false
}

// SetAppleGameCenterConfig gets a reference to the given AppleGameCenterConfig and assigns it to the AppleGameCenterConfig field.
func (o *LinkExternalIdRequest) SetAppleGameCenterConfig(v AppleGameCenterConfig) {
	o.AppleGameCenterConfig = &v
}

// GetSteamConfig returns the SteamConfig field value if set, zero value otherwise.
func (o *LinkExternalIdRequest) GetSteamConfig() SteamConfig {
	if o == nil || IsNil(o.SteamConfig) {
		var ret SteamConfig
		return ret
	}
	return *o.SteamConfig
}

// GetSteamConfigOk returns a tuple with the SteamConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LinkExternalIdRequest) GetSteamConfigOk() (*SteamConfig, bool) {
	if o == nil || IsNil(o.SteamConfig) {
		return nil, false
	}
	return o.SteamConfig, true
}

// HasSteamConfig returns a boolean if a field has been set.
func (o *LinkExternalIdRequest) HasSteamConfig() bool {
	if o != nil && !IsNil(o.SteamConfig) {
		return true
	}

	return false
}

// SetSteamConfig gets a reference to the given SteamConfig and assigns it to the SteamConfig field.
func (o *LinkExternalIdRequest) SetSteamConfig(v SteamConfig) {
	o.SteamConfig = &v
}

func (o LinkExternalIdRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LinkExternalIdRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForceLink) {
		toSerialize["forceLink"] = o.ForceLink
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.OculusConfig) {
		toSerialize["oculusConfig"] = o.OculusConfig
	}
	if !IsNil(o.AppleGameCenterConfig) {
		toSerialize["appleGameCenterConfig"] = o.AppleGameCenterConfig
	}
	if !IsNil(o.SteamConfig) {
		toSerialize["steamConfig"] = o.SteamConfig
	}
	return toSerialize, nil
}

type NullableLinkExternalIdRequest struct {
	value *LinkExternalIdRequest
	isSet bool
}

func (v NullableLinkExternalIdRequest) Get() *LinkExternalIdRequest {
	return v.value
}

func (v *NullableLinkExternalIdRequest) Set(val *LinkExternalIdRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLinkExternalIdRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLinkExternalIdRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLinkExternalIdRequest(val *LinkExternalIdRequest) *NullableLinkExternalIdRequest {
	return &NullableLinkExternalIdRequest{value: val, isSet: true}
}

func (v NullableLinkExternalIdRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLinkExternalIdRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


