openapi: 3.0.0
info:
  description: |
    # Introduction
    This is the Admin API specification for the Unity Authentication service that allows player authentication.
    To use this API, you must first enable it through the Unity Gaming Services dashboard.

    For more information about how to set up Service Account Authentication, please read here: https://services.docs.unity.com/docs/service-account-auth

    ## Rate Limits
    The API has rate limiting in place. Request are limited to 10 requests per second, and 500 requests per 30 minute period.

    The API responds with a `429` HTTP status code if the rate limit is
    exceeded.

    It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic.
    The value is the number of seconds until a request for the given player will be accepted.
  title: Player Authentication Admin API
  version: 1.0.1
servers:
- url: https://services.api.unity.com
tags:
- description: Admin APIs for Player Authentication
  name: Player Authentication Admin
paths:
  /player-identity/v1/projects/{projectId}/users:
    get:
      description: Return a list of the project's players and their information.
      operationId: ListPlayers
      parameters:
      - description: Id of the project.
        example: 8bdacc33-6eef-4577-beb0-633c86259f5b
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      - description: The number of players to return.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          maximum: 1000
          minimum: 1
          type: integer
        style: form
      - description: "(Optional) The next page token. If not set, returns players\
          \ without any offset."
        explode: true
        in: query
        name: page
        required: false
        schema:
          pattern: "^[a-zA-Z0-9-_]+$"
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player-auth.ListProjectUserResponse'
          description: A successful response.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ValidationError.v1'
          description: Bad Request.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthenticationError.v1'
          description: Permission Denied.
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthorizationError.v1'
          description: Unauthorized.
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.NotFoundError.v1'
          description: Resource not found.
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.TooManyRequestsError.v1'
          description: Too Many Requests.
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.InternalServerError.v1'
          description: Internal Server Error.
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ServiceUnavailableError.v1'
          description: Internal Server Error.
      security:
      - Admin:
        - authentication.list
      summary: List Players
      tags:
      - Player Authentication Admin
  /player-identity/v1/projects/{projectId}/users/{playerId}:
    delete:
      description: "Delete a player. [WARNING] The account deletion API only deletes\
        \ the player's Unity Authentication account. It is your obligation to ensure\
        \ that you delete all associated player data that is connected to the player's\
        \ Unity Authentication account and other UGS services you use, such as Economy\
        \ and Cloud Save."
      operationId: DeletePlayer
      parameters:
      - description: |
          This is the player Id.
        example: 99i9ju8juh
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the project.
        example: 8bdacc33-6eef-4577-beb0-633c86259f5b
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player-auth.protobufEmpty'
          description: A successful response.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ValidationError.v1'
          description: Bad Request.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthenticationError.v1'
          description: Permission Denied.
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthorizationError.v1'
          description: Unauthorized.
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.NotFoundError.v1'
          description: Resource not found.
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.TooManyRequestsError.v1'
          description: Too Many Requests.
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.InternalServerError.v1'
          description: Internal Server Error.
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ServiceUnavailableError.v1'
          description: Internal Server Error.
      security:
      - Admin:
        - authentication.delete
      summary: Delete Player
      tags:
      - Player Authentication Admin
    get:
      description: Get the current player's information.
      operationId: GetPlayer
      parameters:
      - description: |
          This is the player Id.
        example: 99i9ju8juh
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the project.
        example: 8bdacc33-6eef-4577-beb0-633c86259f5b
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player-auth.PlayerProjectResponse'
          description: A successful response.
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ValidationError.v1'
          description: Bad Request.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthenticationError.v1'
          description: Permission Denied.
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthorizationError.v1'
          description: Unauthorized.
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.NotFoundError.v1'
          description: Resource not found.
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.TooManyRequestsError.v1'
          description: Too Many Requests.
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.InternalServerError.v1'
          description: Internal Server Error.
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ServiceUnavailableError.v1'
          description: Internal Server Error.
      security:
      - Admin:
        - authentication.get
      summary: Get Player
      tags:
      - Player Authentication Admin
  /player-identity/v1/projects/{projectId}/users/{playerId}/enable:
    post:
      description: Enable the player.
      operationId: EnablePlayer
      parameters:
      - description: |
          This is the player Id.
        example: 99i9ju8juh
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the project.
        example: 8bdacc33-6eef-4577-beb0-633c86259f5b
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player-auth.PlayerProjectResponse'
          description: Request Successful
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ValidationError.v1'
          description: Bad Request.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthenticationError.v1'
          description: Permission Denied.
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthorizationError.v1'
          description: Unauthorized.
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.NotFoundError.v1'
          description: Resource not found.
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.TooManyRequestsError.v1'
          description: Too Many Requests.
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.InternalServerError.v1'
          description: Internal Server Error.
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ServiceUnavailableError.v1'
          description: Internal Server Error.
      summary: Enable Player
      tags:
      - Player Authentication Admin
  /player-identity/v1/projects/{projectId}/users/{playerId}/disable:
    post:
      description: Disable the player.
      operationId: DisablePlayer
      parameters:
      - description: |
          This is the player Id.
        example: 99i9ju8juh
        explode: false
        in: path
        name: playerId
        required: true
        schema:
          type: string
        style: simple
      - description: Id of the project.
        example: 8bdacc33-6eef-4577-beb0-633c86259f5b
        explode: false
        in: path
        name: projectId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/player-auth.PlayerProjectResponse'
          description: Request Successful
        "400":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ValidationError.v1'
          description: Bad Request.
        "401":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthenticationError.v1'
          description: Permission Denied.
        "403":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.AuthorizationError.v1'
          description: Unauthorized.
        "404":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.NotFoundError.v1'
          description: Resource not found.
        "429":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.TooManyRequestsError.v1'
          description: Too Many Requests.
        "500":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.InternalServerError.v1'
          description: Internal Server Error.
        "503":
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/player-auth.ServiceUnavailableError.v1'
          description: Internal Server Error.
      summary: Disable Player
      tags:
      - Player Authentication Admin
components:
  parameters:
    PlayerId:
      description: |
        This is the player Id.
      example: 99i9ju8juh
      explode: false
      in: path
      name: playerId
      required: true
      schema:
        type: string
      style: simple
    ProjectId:
      description: Id of the project.
      example: 8bdacc33-6eef-4577-beb0-633c86259f5b
      explode: false
      in: path
      name: projectId
      required: true
      schema:
        type: string
      style: simple
  schemas:
    player-auth.ExternalId:
      description: Represents a Player provided by an External Provider
      example:
        providerId: provider-Id
        externalId: 5eb26a338a232
      properties:
        externalId:
          description: The Id of the player from the external provider.
          example: 5eb26a338a232
          type: string
        providerId:
          description: The provider Id within the Id domain that provided the link.
          example: provider-Id
          type: string
      title: player-auth.ExternalId
      type: object
    player-auth.PlayerProjectResponse:
      description: represents a player provided by an External Provider
      example:
        createdAt: "123000000"
        lastLoginAt: "123000000"
        externalIds:
        - providerId: provider-Id
          externalId: 5eb26a338a232
        - providerId: provider-Id
          externalId: 5eb26a338a232
        disabled: false
        id: eyJhbGciOiJIUzI1N
      properties:
        disabled:
          description: Whether the player is enabled or disabled by admin.
          example: false
          type: boolean
        externalIds:
          description: This is the response returned when get player is called.
          items:
            $ref: '#/components/schemas/player-auth.ExternalId'
          type: array
        id:
          description: The player Id. The Id is unique within the Id domain.
          example: eyJhbGciOiJIUzI1N
          type: string
        createdAt:
          description: When the player was created at. It is a unix timestamp.
          example: "123000000"
          type: string
        lastLoginAt:
          description: When the player last logged in. It is a unix timestamp.
          example: "123000000"
          type: string
      title: player-auth.PlayerProjectResponse
      type: object
    player-auth.ListProjectUserResponse:
      description: represents a list of players from a project.
      example:
        next: xxxxxxxx
        results:
        - createdAt: "123000000"
          lastLoginAt: "123000000"
          externalIds:
          - providerId: provider-id
          - providerId: provider-id
          disabled: false
          id: eyJhbGciOiJIUzI1N
        - createdAt: "123000000"
          lastLoginAt: "123000000"
          externalIds:
          - providerId: provider-id
          - providerId: provider-id
          disabled: false
          id: eyJhbGciOiJIUzI1N
      properties:
        next:
          description: The next page token if available. Needed for the next batch
            GET request of players.
          example: xxxxxxxx
          type: string
        results:
          description: Resulting collection of Players.
          items:
            $ref: '#/components/schemas/player-auth.ListProjectUserResponseUser'
          type: array
      title: player-auth.ListProjectUserResponse
      type: object
    player-auth.ListProjectUserResponseUser:
      description: Represents a requested player.
      example:
        createdAt: "123000000"
        lastLoginAt: "123000000"
        externalIds:
        - providerId: provider-id
        - providerId: provider-id
        disabled: false
        id: eyJhbGciOiJIUzI1N
      properties:
        id:
          description: The player Id. The Id is unique within the Id domain.
          example: eyJhbGciOiJIUzI1N
          type: string
        disabled:
          description: Whether the player is enabled or disabled by admin.
          example: false
          type: boolean
        externalIds:
          description: List of externalIds that have been linked to the player.
          items:
            $ref: '#/components/schemas/player-auth.ListProjectUserResponseExternalId'
          type: array
        createdAt:
          description: When the player was created at. It is a unix timestamp.
          example: "123000000"
          type: string
        lastLoginAt:
          description: When the player last logged in. It is a unix timestamp.
          example: "123000000"
          type: string
      title: player-auth.ListProjectUserResponseUser
      type: object
    player-auth.ListProjectUserResponseExternalId:
      description: Represents a Player provided by an External Provider
      example:
        providerId: provider-id
      properties:
        providerId:
          description: The provider Id within the Id domain that provided the link.
          example: provider-id
          type: string
      title: player-auth.ListProjectUserResponseExternalId
      type: object
    player-auth.protobufEmpty:
      description: https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Empty
      type: object
    player-auth.ValidationError.v1:
      properties:
        title:
          example: Bad Request
          type: string
        status:
          example: 400
          type: integer
        detail:
          example: Something is wrong
          type: string
        details:
          items:
            example:
              code: ERROR_CODE_123
              path: nested.value
              message: Invalid value
            type: object
          type: array
      type: object
    player-auth.AuthenticationError.v1:
      properties:
        title:
          example: Unauthorized
          type: string
        status:
          example: 401
          type: integer
        detail:
          example: Something is wrong
          type: string
        details:
          items:
            example:
              code: ERROR_CODE_123
              path: nested.value
              message: Invalid value
            type: object
          type: array
      type: object
    player-auth.AuthorizationError.v1:
      properties:
        title:
          example: Forbidden
          type: string
        status:
          example: 403
          type: integer
        detail:
          example: Something is wrong
          type: string
        details:
          items:
            example:
              code: ERROR_CODE_123
              path: nested.value
              message: Invalid value
            type: object
          type: array
      type: object
    player-auth.NotFoundError.v1:
      properties:
        title:
          example: Not Found
          type: string
        status:
          example: 404
          type: integer
        detail:
          example: Something is wrong
          type: string
        details:
          items:
            example:
              code: ERROR_CODE_123
              path: nested.value
              message: Invalid value
            type: object
          type: array
      type: object
    player-auth.TooManyRequestsError.v1:
      properties:
        title:
          example: Too Many Requests
          type: string
        status:
          example: 429
          type: integer
        detail:
          example: Something is wrong
          type: string
        details:
          items:
            example:
              code: ERROR_CODE_123
              path: nested.value
              message: Invalid value
            type: object
          type: array
      type: object
    player-auth.InternalServerError.v1:
      properties:
        title:
          example: Internal Server Error
          type: string
        status:
          example: 500
          type: integer
        detail:
          example: Something is wrong
          type: string
        details:
          items:
            example:
              code: ERROR_CODE_123
              path: nested.value
              message: Invalid value
            type: object
          type: array
      type: object
    player-auth.ServiceUnavailableError.v1:
      properties:
        title:
          example: Service Unavailable
          type: string
        status:
          example: 503
          type: integer
        detail:
          example: Something is wrong
          type: string
        details:
          items:
            example:
              code: ERROR_CODE_123
              path: nested.value
              message: Invalid value
            type: object
          type: array
      type: object
  securitySchemes:
    Admin:
      description: |-
        To get started with Authentication, please visit the [Service Account Authentication section](https://services.docs.unity.com/docs/service-account-auth).

        For this API, you will need to add the following role(s) to your service account :
        | Role Type | Role Name | Permissions |
        | --- | --- | --- |
        | Project Level Role | Authentication Admin | <ul><li> authentication.delete</li></ul> |
        | Project Level Role | Authentication Editor | <ul><li> authentication.delete</li></ul> |
      scheme: basic
      type: http
