/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the GenerateCodeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateCodeRequest{}

// GenerateCodeRequest Request for generating a sign in code.
type GenerateCodeRequest struct {
	// Human-readable string to identify the requester device.
	Identifier *string `json:"identifier,omitempty"`
	// SHA-256 string challenge for PKCE validation
	CodeChallenge *string `json:"codeChallenge,omitempty"`
}

// NewGenerateCodeRequest instantiates a new GenerateCodeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateCodeRequest() *GenerateCodeRequest {
	this := GenerateCodeRequest{}
	return &this
}

// NewGenerateCodeRequestWithDefaults instantiates a new GenerateCodeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateCodeRequestWithDefaults() *GenerateCodeRequest {
	this := GenerateCodeRequest{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *GenerateCodeRequest) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCodeRequest) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *GenerateCodeRequest) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *GenerateCodeRequest) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetCodeChallenge returns the CodeChallenge field value if set, zero value otherwise.
func (o *GenerateCodeRequest) GetCodeChallenge() string {
	if o == nil || IsNil(o.CodeChallenge) {
		var ret string
		return ret
	}
	return *o.CodeChallenge
}

// GetCodeChallengeOk returns a tuple with the CodeChallenge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCodeRequest) GetCodeChallengeOk() (*string, bool) {
	if o == nil || IsNil(o.CodeChallenge) {
		return nil, false
	}
	return o.CodeChallenge, true
}

// HasCodeChallenge returns a boolean if a field has been set.
func (o *GenerateCodeRequest) HasCodeChallenge() bool {
	if o != nil && !IsNil(o.CodeChallenge) {
		return true
	}

	return false
}

// SetCodeChallenge gets a reference to the given string and assigns it to the CodeChallenge field.
func (o *GenerateCodeRequest) SetCodeChallenge(v string) {
	o.CodeChallenge = &v
}

func (o GenerateCodeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateCodeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.CodeChallenge) {
		toSerialize["codeChallenge"] = o.CodeChallenge
	}
	return toSerialize, nil
}

type NullableGenerateCodeRequest struct {
	value *GenerateCodeRequest
	isSet bool
}

func (v NullableGenerateCodeRequest) Get() *GenerateCodeRequest {
	return v.value
}

func (v *NullableGenerateCodeRequest) Set(val *GenerateCodeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateCodeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateCodeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateCodeRequest(val *GenerateCodeRequest) *NullableGenerateCodeRequest {
	return &NullableGenerateCodeRequest{value: val, isSet: true}
}

func (v NullableGenerateCodeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateCodeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


