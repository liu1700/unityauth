/*
Player Authentication API

# Introduction This is the API specification for the Unity Authentication service that allows player authentication.  ## Rate Limits The API has rate limiting in place. The endpoints are limited to 15 requests per second on a per-IP basis, and 300 requests over 30 minutes. The API responds with a `429` HTTP status code if the rate limit is exceeded. It will also respond with a `Retry-After` header to be used in conjunction with a client's retry logic. The value is the number of seconds until a request for the given player will be accepted. 

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package unityauth

import (
	"encoding/json"
)

// checks if the SignInWithSessionTokenRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignInWithSessionTokenRequest{}

// SignInWithSessionTokenRequest the request body for session token authentication
type SignInWithSessionTokenRequest struct {
	// String value used to associate a Client session with an Id Token, and to mitigate replay attacks. If this field is provided, the nonce claim in response Id token has a matching value.
	Nonce *string `json:"nonce,omitempty"`
	// The session token of the player.
	SessionToken *string `json:"sessionToken,omitempty"`
}

// NewSignInWithSessionTokenRequest instantiates a new SignInWithSessionTokenRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignInWithSessionTokenRequest() *SignInWithSessionTokenRequest {
	this := SignInWithSessionTokenRequest{}
	return &this
}

// NewSignInWithSessionTokenRequestWithDefaults instantiates a new SignInWithSessionTokenRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignInWithSessionTokenRequestWithDefaults() *SignInWithSessionTokenRequest {
	this := SignInWithSessionTokenRequest{}
	return &this
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *SignInWithSessionTokenRequest) GetNonce() string {
	if o == nil || IsNil(o.Nonce) {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignInWithSessionTokenRequest) GetNonceOk() (*string, bool) {
	if o == nil || IsNil(o.Nonce) {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *SignInWithSessionTokenRequest) HasNonce() bool {
	if o != nil && !IsNil(o.Nonce) {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *SignInWithSessionTokenRequest) SetNonce(v string) {
	o.Nonce = &v
}

// GetSessionToken returns the SessionToken field value if set, zero value otherwise.
func (o *SignInWithSessionTokenRequest) GetSessionToken() string {
	if o == nil || IsNil(o.SessionToken) {
		var ret string
		return ret
	}
	return *o.SessionToken
}

// GetSessionTokenOk returns a tuple with the SessionToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignInWithSessionTokenRequest) GetSessionTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SessionToken) {
		return nil, false
	}
	return o.SessionToken, true
}

// HasSessionToken returns a boolean if a field has been set.
func (o *SignInWithSessionTokenRequest) HasSessionToken() bool {
	if o != nil && !IsNil(o.SessionToken) {
		return true
	}

	return false
}

// SetSessionToken gets a reference to the given string and assigns it to the SessionToken field.
func (o *SignInWithSessionTokenRequest) SetSessionToken(v string) {
	o.SessionToken = &v
}

func (o SignInWithSessionTokenRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignInWithSessionTokenRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nonce) {
		toSerialize["nonce"] = o.Nonce
	}
	if !IsNil(o.SessionToken) {
		toSerialize["sessionToken"] = o.SessionToken
	}
	return toSerialize, nil
}

type NullableSignInWithSessionTokenRequest struct {
	value *SignInWithSessionTokenRequest
	isSet bool
}

func (v NullableSignInWithSessionTokenRequest) Get() *SignInWithSessionTokenRequest {
	return v.value
}

func (v *NullableSignInWithSessionTokenRequest) Set(val *SignInWithSessionTokenRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSignInWithSessionTokenRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSignInWithSessionTokenRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignInWithSessionTokenRequest(val *SignInWithSessionTokenRequest) *NullableSignInWithSessionTokenRequest {
	return &NullableSignInWithSessionTokenRequest{value: val, isSet: true}
}

func (v NullableSignInWithSessionTokenRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignInWithSessionTokenRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


